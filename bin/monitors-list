#!/bin/bash
#
# monitors-list
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a list of registered system monitors. Optionally, one can search
# by systemId
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [MONITOR_ID]

List monitors individually or filter by systemId and active status.

 Options:
  -z, --access_token    Access token
  -T, --target          Only return monitors for the target system
  -A, --activeonly      Only return active montiors
  -I, --inactiveonly    Only return inactive monitors
      --filter          Comma separated list of fields to return in the response
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/monitors-common.sh"

main() {
	#echo -n
	#set -x

	hosturl=${hosturl%/}

	if [ -n "$args" ]; then

  	monitorurl="${hosturl}/${args}?pretty=true$(pagination)"

  else

    queryParams="pretty=true$(pagination)"

    if [ -n "$activeonly" ]; then

      queryParams="active=true&${queryParams}"

    elif [ -n "$inactiveonly" ]; then

      queryParams="active=false&${queryParams}"

    fi

    if [ -n "$target" ]; then
		    queryParams="target=${target}&${queryParams}"
	  fi

		monitorurl="${hosturl}?${queryParams}"

	fi

	cmd="agave-curl -sk -H \"${authheader}\" '${monitorurl}'"

	if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

	response=`agave-curl -sk -H "${authheader}" "${monitorurl}"`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

    if ((veryverbose)); then
        echo "$1"
    elif [[ $verbose -eq 1 ]]; then
        result=$(jsonquery "$1" "result" 1)
        json_prettyify "${result}"
    else

        if [ -n "$args" ]; then
            montarget=$(jsonquery "$1" "result.target" | sed 's/null//')
            monfreq=$(jsonquery "$1" "result.frequency" | sed 's/null//')
            echo "$args $montarget $monfreq"
        else
            monitors=( $(jsonquery "$1" "result.[].id") )
            frequencies=( $(jsonquery "$1" "result.[].frequency") )
            lastUpdateds=( $(jsonquery "$1" "result.[].lastUpdated") )
            lastSuccesses=( $(jsonquery "$1" "result.[].lastSuccess") )

            n=0
            for i in $(jsonquery "$1" "result.[].target")
            do
                target=""
                if [[ -n "$i" ]] && [[ "$i" != "null" ]]; then
                    target=" $i"
                fi

                checkStatus=""
                if [[ "${lastUpdateds[$n]}" = "${lastSuccesses[$n]}" ]]; then
                    if [[ "${lastUpdateds[$n]}" != "null" ]]; then
                        checkStatus=" PASSED"
                    fi
                elif [[ -n "${lastUpdateds[$n]}" ]] && [[ -n "${lastSuccesses[$n]}" ]]; then
                    if [[ "${lastUpdateds[$n]}" != "null" ]] || [[ "${lastSuccesses[$n]}" != "null" ]]; then
                        checkStatus=" FAILED"
                    fi
                fi

                freq=""
                if [[ -n "${frequencies[$n]}" ]] && [[ "${frequencies[$n]}" != "null" ]]; then
                    freq=" ${frequencies[$n]}"
                fi

                monitors[$n]="${monitors[$n]}$checkStatus$freq$target"
                n=$[ n + 1 ]
            done

            for i in "${monitors[@]}"; do
                echo "$i"
            done
        fi
    fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -T|--target) shift; target=$1 ;;
    -A|--activeonly) activeonly=1 ;;
    -I|--inactiveonly) inactiveonly=1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
