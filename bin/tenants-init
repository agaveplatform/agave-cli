#!/bin/bash
#
# tenants-init
#
# author: deardooley@gmail.com
#
# This script is part of the Agave API command line interface (CLI).
# It configures the cli by prompting the user for tenant info
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

tenantid=
baseurl=
devurl=

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=()

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...

Configure the context of the cli by selecting the tenant and setting the
base url.

 Options:
  -t, --tenant            The tenant id to use, ex agave.prod. This will overridden the
                          value of AGAVE_TENANT in your environment. 
  -b, --backup            Backup the previous config before setting the new one.
                          The current config will be stored as $AGAVE_CACHE_DIR/backup
  -r, --restore           Sets the backed up config as current config and deletes the backup
  -s, --swap              Swaps the current and backup configs, preserving both
  -d, --developmenturl    The development tenant, ex https://sandbox.example.com
  -H, --hosturl           URL of the service
  -f, --force             Skip all user interaction
  -i, --interactive       Prompt for values
  -q, --quiet             Quiet (no output)
  -v, --verbose           Verbose output
  -V, --veryverbose       Very verbose output
  -h, --help              Display this help and exit
      --version           Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/tenants-common.sh"

main() {
	#echo -n
	#set -x

  if ((restore)); then

    if [ -z "$(kvget backup)" ]; then
      jsonval tenantid "$(kvget current)" "tenantid"
      #tenantid=$(jsonquery "$(kvget current)" "tenantid")
      err "No backup configuration to swap. You are still using $tenantid"
    else
      kvset current "$(kvget backup)"
      kvdel backup
      jsonval tenantid "$(kvget current)" "tenantid"
      #tenantid=$(jsonquery "$(kvget current)" "tenantid")
      success "Configuration swapped. Now using $tenantid"
    fi

    exit

  elif ((swap)); then

    if [ -z "$(kvget backup)" ]; then
      jsonval tenantid "$(kvget current)" "tenantid"
#      tenantid=$(jsonquery "$(kvget current)" "tenantid")
      err "No backup configuration to swap. You are still using $tenantid"
    else
      kvset backup2 "$(kvget current)"
      kvset current "$(kvget backup)"
      kvset backup "$(kvget backup2)"
      kvdel backup2

      jsonval tenantid "$(kvget current)" "tenantid"
      #tenantid=$(jsonquery "$(kvget current)" "tenantid")
      success "Configuration swapped. Now using $tenantid"
    fi

    exit

  else

    # query for a list of tenants
    tenantresponse=$(tenants-list -H $hosturl -V 2>&1 )

    if [[ -z "$(jsonquery "${tenantresponse}" "result.[].code" 2>/dev/null)" ]]; then
      err "No tenants found when querying the tenant service at $hosturl"
    fi

    oldIFS="$IFS"
    #tenantids=$(jsonquery "${tenantresponse}" "result.[].tenantId")
    IFS='
    '
    IFS=${IFS:0:1} # this is useful to format your code with tabs
    tenantids=( $(jsonquery "${tenantresponse}" "result.[].code") )
    tenanturls=( $(jsonquery "${tenantresponse}" "result.[].baseUrl") )
    IFS="$oldIFS"

    # look up current tenant and baseurl to avoid resetting the context if the
    # command is rerun, but the tenant does not change.
    jsonval currentTenantId "$(kvget current)" "tenantid"
    jsonval currentBaseUrl "$(kvget current)" "baseurl"


    # set default tenant in case none is present in the environment
    # use their current tenant as the default if it is present
    # in the list returned from the tenants api
    if [[ "${tenantids[@]}" =~ $currentTenantId ]]; then
      DEFAULT_TENANT_ID=$currentTenantId

    # we use the public tenant if present in the list and
    # their current tenant is not
    elif [[ "${tenantids[@]}" =~ "agave.prod" ]]; then
      DEFAULT_TENANT_ID=agave.prod

    # otherwise, we set to the first tenant returned from the service
    else
      DEFAULT_TENANT_ID=${tenantids[0]}
    fi

    echo $DEFAULT_TENANT_ID

    re='^[0-9]+$'
        
    if [ -z "$tenant" ]; then
      
      if ((force)); then
        if [[ -n "$DEFAULT_TENANT_ID" ]]; then
          tenant="$DEFAULT_TENANT_ID"
        fi
      else 
        echo "Please select a tenant from the following list:"
        for i in "${!tenantids[@]}"
        do
          echo "[$i] ${tenantids[$i]}"
          if [[ "${tenantids[$i]}" == "$DEFAULT_TENANT_ID" ]]; then
            tenantid=$i
          fi
        done
          
          
        echo -n "Your choice [$tenantid]: "
        eval "read tenant"
      
        # use the default tenant id
        if [[ -z "$tenant" ]]; then
          tenant="$DEFAULT_TENANT_ID"
        fi
      fi
              
    fi

    if [[ "$tenant" =~ $re ]] ; then
      if [ $tenant -ge ${#tenantids[@]} ]; then
        err "Invalid choice. Please select a valid number from 1-${#tenantids[@]} or provide a valid tenant id (ie. "$DEFAULT_TENANT_ID")";
        exit
      else
        tenant="${tenantids[$tenant]}"
      fi
    fi
  fi

  # validate the tenant id
  for i in "${!tenantids[@]}"
  do
    if [[ "$tenant" == "${tenantids[$i]}" ]]; then
      tenantid="${tenantids[$i]}"
      baseurl="${tenanturls[$i]}"
      break
    fi
  done

  if [ -z "$tenantid" ]; then
    err "Unknown tenant id $tenant. Please provide a valid tenant id to initialize the cli."
    exit
  else

    # if the new and old tenant code and baseurl match, simply tell them they
    # are already set up for that tenant and exit.
    if [ "$currentTenantId" == "$tenantid" ] && [ "$currentTenantId" == "$tenantid" ]; then
      success "You are already configured to interact with the $tenantid APIs at $baseurl"
      exit

    # they have actually switched tenants, so process the new config as needed
    else
      # set the dev url in case they provide one
      if [ -z "$developmenturl" ]; then
        devurl="http://localhost:8080"
      fi

      # backup the old config if present
      if ((backup)); then
        kvset backup "$(kvget current)"
      fi

      # save the tenant config. backing up the previous one
      kvset current "{\"tenantid\":\"$tenantid\",\"baseurl\":\"$baseurl\",\"devurl\":\"$developmenturl\",\"apisecret\":\"$client_secret\",\"apikey\":\"$client_key\",\"username\":\"$apiusername\",\"access_token\":\"\",\"refresh_token\":\"\",\"created_at\":\"\",\"expires_in\":\"\"}"

      success "You are now configured to interact with the $tenantid APIs at $baseurl"

    fi

  fi
}

format_api_json() {

	if [[ $verbose -eq 1 ]]; then
		json_prettyify "${1}"
	else
		success "Current token for $username valid for another $time_left seconds"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -t|--tenant) shift; tenant=$1 ;;
    -b|--backup) backup=1 ;;
    -r|--restore) restore=1 ;;
    -s|--swap) swap=1 ;;
    -H|--hosturl) shift; hosturl=$1;;
    -d|--developmenturl) shift; developmenturl=$1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

if [[ -z "$tenant" ]] && [[ -n "$AGAVE_TENANT" ]]; then
    tenant="$AGAVE_TENANT"
fi
      
# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
