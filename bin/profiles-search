#!/bin/bash
#
# profiles-search
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It searches user profiles by field using agave's json sql syntax.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(access_token)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... USERNAME

Search for API users. User profile fields vary from tenant to tenant, but
the following fields are consistent across all tenants.

 Query parameters:
  create_time                   The timestamp when the system was first registered. Results are
                                rounded by day. You may specify using YYYY-MM-DD format or free
                                form timeframes such as 'yesterday' or '3 days ago'.
  status                       	Current status of the account. Valid values are Active and Inactive
                                Default Active.
  first_name                    First name of the user.
  last_name                     Last name of the user.
  full_name                     Full display name of the user.
  email                   		Email address of the user. This must be unique within the tenant.
  phone							Land line phone number of the user.
  mobile_phone                  Mobile phone number of the user
  username                      Unique username for the user.

 Options:
  -z, --access_token    Access token
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/profiles-common.sh"

main() {
	#echo -n
	#set -x
	profilesurl=${hosturl%/}

	querystring=""

	if [ -n "$args" ]; then
		for i in "${args[@]}"
		do
			querystring="${querystring} --data "$(urlencode "${i}" | sed 's/%3D/=/')
		done
	fi

	cmd="$(do_curl) -G -sk -H \"${authheader}\" '$profilesurl?pretty=true$(pagination)' ${querystring}"

	if ((veryverbose)); then
		[ "$piped" -eq 0 ] && log "Calling $cmd"
	fi


	response=`curl -G -sk -H "${authheader}" $profilesurl?pretty=true$(pagination) $querystring`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		result=$(jsonquery "$1" "result.[].username")
		echo "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -N|--name) shift; name=$1 ;;
    -E|--email) shift; email=$1 ;;
    -U|--user) shift; user=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
