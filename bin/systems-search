#!/bin/bash
#
# systems-search
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a list systems based on search criteria.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTIONS]... [QUERY_TERM]...

Search for systems based on system attribute values. Valid values should be
specified in key pairs such as executionSystem.like=docker* or
public=true. Multiple search terms may be provided as consecutive arguments. For example,
'executionType.eq=HPC' 'executionSystem.like=*stampede*' 'lastUpdated.after=last week'.

 Query parameters:
  available                     Whether the system is available. Boolean, default true
  created                       The timestamp when the system was first registered. Results are
                                rounded by day. You may specify using YYYY-MM-DD format or free
                                form timeframes such as 'yesterday' or '3 days ago'.
  default                       Whether the system is the default system of its type for the user.
                                Boolean, default false.
  description                   The textual description of this system.
  globaldefault                 Whether the system is the global default system of its type for
                                the user. Boolean, default false.
  id                            The unique id of this system.
  lastupdated                   The timestamp of the last time the system was updated. Results are
                                rounded by day. You may specify using YYYY-MM-DD format or free
                                form timeframes such as 'yesterday' or '3 days ago'.
  lastmodified                  Alias for lastupdated.
  name                          The name of the system.
  owner                         The username of the principal who originally registered the system.
  public                        Whether the system is publicly available for use. Boolean, if true
                                only public systems will be returned. If false, only private systems
                                will be returned. If unset, both public and private will be returned.
                                Default null.
  site                          The site to which this system belongs.
  status                        The status of the system. Possible values are: UP, DOWN, MAINTENANCE,
                                UNKNOWN.
  storage.zone                  For IRODS systems, the zone to which this storage system authenticates.
  storage.resource              For IRODS systems, the resource to which the system storage
                                configuration authenticates.
  storage.bucket                For cloud systems, the bucket to which the system storage
                                configuration points.
  storage.host                  The hostname or ip address to which the system storage configuration
                                points.
  storage.port                  The port used to connect to the remote system for storage operations.
  storage.homedir               The home directory given by the system storage configuration.
  storage.rootdir               The virutal root directory given by the system storage configuration.
  storage.protocol              The protocol used to connect to the remote system for storage operations.
  storage.proxy.name            The name of the server used for tunnel storage connections.
  storage.proxy.host            The hostname or ip address of the server used for tunnel storage connections.
  storage.proxy.port            The port of the server used for tunnel storage connections.
  type                          The system type. Possible values are STORAGE and EXECUTION.
  login.host                    The hostname or ip address to which the system login configuration
                                points.
  login.port                    The login port used to connect to the remote system.
  login.protocol                The login protocol used to connect to the remote system.
  login.proxy.name              The name of the server used for tunnel login connections.
  login.proxy.host              The hostname or ip address of the server used for tunnel login connections.
  login.proxy.port              The port of the server used for tunnel login connections.
  workdir                       The work directory used during job execution.
  scratchdir                    The scratch directory used during job execution.
  maxsystemjobs                 The maximum number of concurrent jobs allowed on the system.
  maxsystemjobsperuser          The maximum number of concurrent jobs per user allowed on the system.
  startupscript                 The startup script run prior to job execution.
  executiontype                 The types of job execution supported on the system. Possible values are:
                                CLI, HPC, CONDOR
  environment                   Custom runtime environment variables set at runtime for job execution.
  scheduler                     The scheduler used on the remote system. Possible values are: LSF, LOADLEVELER,
                                PBS, SGE, CONDOR, FORK, COBALT, TORQUE, MOAB, SLURM, UNKNOWN
  queues.default                Whether a queue is the default system queue. This search term only makes sense
                                when combined with another queue value such as queues.name.
  queues.customdirectives       Custom directives given to the scheduler at runtime.
  queues.maxjobs                The maximum number of concurrent jobs allowed in a queue.
  queues.maxmemoryperjob        The maximum memory allowed per job in a queue.
  queues.maxnodes               The maximum number of nodes allowed per job in a queue.
  queues.maxprocessorspernode   The maximum number of processors per node allowed in a queue.
  queues.maxuserjobs            The maximum number of concurrent jobs per user allowed in a queue.
  queues.name                   The name of the queue.
  uuid                          The uuid of the system.

 Options:
  -z, --access_token    Access token
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
      --rich            Provide rich response
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/systems-common.sh"

main() {
	#echo -n
	#set -x
    systemsurl=${hosturl%/}

    querystring=""

    if [ -n "$args" ]; then
        for i in "${args[@]}"
        do
            querystring="${querystring} --data "$(urlencode "${i}" | sed 's/%3D/=/')
        done
    fi

    cmd="agave-curl -G -sk -H \"${authheader}\" '$systemsurl?pretty=true$(pagination)' ${querystring}"

	if ((veryverbose)); then
        [ "$piped" -eq 0 ] && log "Calling $cmd"
    fi


	response=`agave-curl -G -sk -H "${authheader}" $systemsurl?pretty=true$(pagination) $querystring`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	elif [[ $rich -eq 1 ]]; then
        result=$(richify "$1")
        columnize "${result}"
	else
		systemids=$(jsonquery "$1" "result.[].id")

		echo "$systemids"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --rich) rich=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
