#!/bin/bash
#
# notifications-addupdate
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It adds a notification.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey filetoupload)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [NOTIFICATION_ID]

Subscribe for a notification about an event in the API. Notifications require
a valid, existing, Agave UUID, event, and callback in the form of a URL or
email address. The needed information can be passed in as a file containing
information as a JSON object or via command line arguments.

 Options:
  -z, --access_token      Access token
  -F, --filetoupload      The file containing the JSON notification description to submit
  -U, --url               The callback url or email address for this notification
  -E, --event             The event about which to send notifications
  -P, --persistent        Whether this event should expire after the first occurence
  -R, --retrystrategy     The retry strategy to apply: IMMEDIATE, DELAYED, EXPONENTIAL
  -D, --retrydelay        The number of seconds to delay after the initial notification
                          attempt before beginning retry attempts. Max is 1 day.
  -L, --retrylimit        Maximum number of retries before failing and terminating
                          subsequent attempts. Max 1440 or once per minute for an
                          entire day.
  -I, --retryrate         Number of seconds between retries. A value of zero indicates
                          the attempt should be retired immediately.
  -S, --saveonfailure     Whether a failed attempt will be stored if delivery cannot
                          be made before the retry policy parameters are violated.
  -A, --associatedUuid    The uuid of the object for which this notification applies
  -H, --hosturl           URL of the service
  -d, --development       Run in dev mode using default dev server
  -f, --force             Skip all user interaction
  -i, --interactive       Prompt for values
  -q, --quiet             Quiet (no output)
  -v, --verbose           Verbose output
  -V, --veryverbose       Very verbose output
  -h, --help              Display this help and exit
      --version           Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/notifications-common.sh"

main() {
	#echo -n
	#set -x

  if [[ -d "$filetoupload" ]]; then

    response="Directory input is not supported"
    err "$response"

  elif [[ -z "$filetoupload" ]]; then

    if [[ -z "$url" ]]; then
        err "Please specify a url or email address to which the notification will be sent"
    else
        url=$(echo "$url" | sed 's/\&/%26/g' )
    fi

    if [[ -z "$event" ]]; then
        err "Please specify an event upon which the notification will be sent"
    fi

    if [[ -z "$associatedUuid" ]]; then
        err "Please specify an associatedUuid for which the notification will be sent"
    fi

    if [[ -z "$persistent" ]]; then
        persistent="false"
    fi

    # boolean field
    if [[ -n "$saveonfailure" ]]; then
      if [[ "$saveonfailure" == "true" ]] || [[ "$saveonfailure" = "1" ]]; then
        saveonfailure="true"
      else
        saveonfailure="false"
      fi
    else
      saveonfailure="false"
    fi

    # IMMEDIATE, DELAYED, EXPONENTIAL
    if [[ -z "$retrystrategy" ]]; then
        retrystrategy="IMMEDIATE"
    fi

    re='^[0-9]+$'

    if [[ -n "$retrydelay" ]]; then
      if ! [[ $retrydelay =~ $re ]] ; then
        err "Please specify a positive integer value for the delay before the first delivery retry attempt begins"
      fi
    else
      if [[ "$retrystrategy" = 'IMMEDIATE' ]] || [[  "$retrystrategy" = "NONE" ]] || [[ "$retrystrategy" = 'immediate' ]] || [[  "$retrystrategy" = "none" ]]; then
        retrydelay=0
      else
        retrydelay=5
      fi
    fi

    if [[ -n "$retrylimit" ]]; then
      if ! [[ $retrylimit =~ $re ]] ; then
        err "Please specify a positive integer value for the maximum delivery retry attempts to be made"
      fi
    else
        retrylimit="5"
    fi

    if [[ -n "$retryrate" ]]; then
      if ! [[ $retrylimit =~ $re ]] ; then
        err "Please specify a positive integer value for the seconds to wait between retry attmepts"
      fi
    else
        retryrate="5"
    fi

    cmd="$(do_curl) -sk -H \"${authheader}\" -X POST -H 'Content-Type: application/json' --data-binary  '{\"event\":\"${event}\",\"persistent\": ${persistent},\"associatedUuid\":\"${associatedUuid}\", \"url\":\"${url}\",\"policy\":{\"retryStrategy\":\"$retrystrategy\",\"retryLimit\":$retrylimit,\"retryRate\":$retryrate,\"retryDelay\":$retrydelay,\"saveOnFailure\":$saveonfailure}}' '${hosturl}$args?pretty=true'"

    if ((veryverbose)); then
        [ "$piped" -eq 0 ] && log "Calling $cmd"
    fi

    response=`curl -sk -H "${authheader}" -X POST -H 'Content-Type: application/json' --data-binary "{\"event\":\"${event}\",\"persistent\": $persistent,\"associatedUuid\":\"${associatedUuid}\", \"url\":\"${url}\",\"policy\":{\"retryStrategy\":\"$retrystrategy\",\"retryLimit\":$retrylimit,\"retryRate\":$retryrate,\"retryDelay\":$retrydelay,\"saveOnFailure\": $saveonfailure}}" "${hosturl}$args?pretty=true"`

  # reading from stdin
  elif [[ "$filetoupload" == "-"  ]]; then

    cmd="$(do_curl) -sk -H \"${authheader}\" -H \"Content-Type: application/json\" -X POST --data-binary @- '${hosturl}${args}?pretty=true'"

    if ((veryverbose)); then
    [ "$piped" -eq 0 ] && log "Calling $cmd"
    fi

    # make sure we specify content type as application/json
    response=`curl -sk -H "${authheader}" -H "Content-Type: application/json" -X POST --data-binary @- "${hosturl}${args}?pretty=true"`

  # standard file upload
  elif [[ -f "$filetoupload" ]]; then

    cmd="$(do_curl) -sk -H \"${authheader}\" -X POST -F \"fileToUpload=@$filetoupload\" '${hosturl}$args?pretty=true'"

    if ((veryverbose)); then
        [ "$piped" -eq 0 ] && log "Calling $cmd"
    fi

    response=`curl -sk -H "${authheader}" -X POST -F "fileToUpload=@$filetoupload" "${hosturl}$args?pretty=true"`

  fi

  if [[ $(jsonquery "$response" "status") = 'success' ]]; then
    result=$(format_api_json "$response")
    success "$result"
  else
    errorresponse=$(jsonquery "$response" "message")
    err "$errorresponse"
  fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		nid=$(jsonquery "$response" "result.id")
		if [ -n "$args" ]; then
            success "Successfully updated notification $nid"
        else
            success "Successfully created notification $nid"
        fi
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -F|--filetoupload) shift; filetoupload=$1 ;;
    -U|--url) shift; url=$1 ;;
    -E|--event) shift; event=$1 ;;
    -P|--persistent) persistent="true" ;;
    -A|--associatedUuid) shift; associatedUuid=$1 ;;
    -R|--retrystrategy) shift; retrystrategy=$1 ;;
    -D|--retrydelay) shift; retrydelay=$1 ;;
    -L|--retrylimit) shift; retrylimit=$1 ;;
    -I|--retryrate) shift; retryrate=$1 ;;
    -S|--saveonfailure) saveonfailure="true" ;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1 ;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
