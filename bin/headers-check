#!/bin/bash
#
# auth-headers-inspect
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# Prints the JWT that would be passed to a protected API by the Agave
# auth server when presented the current auth token.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(access_token filetoupload)

# Print usage
usage() {
    echo -n "$(basename $0) [OPTION]...

Prints the headers that would be passed to a protected API by the Agave auth server
when presented the current auth token.

 Options:
  -z, --access_token    Access token. This will override the value of AGAVE_ACCESS_TOKEN
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/headers-common.sh"

main() {

    if (( debug )); then
        response="Cannot verify jwt in devel mode"
        err "$response"

    else

        cmd="curl -sk -H \"${authheader}\" '${hosturl%%/}"

        if ((veryverbose)); then
            [ "$piped" -eq 0 ] && log "Calling $cmd"
        fi

        # make sure we specify content type as application/json
        response=`curl -sk -H "${authheader}" "${hosturl%%/}"`

    fi

    if [[ -n "$response"  ]]; then
        result=$(format_api_json "$response")
        success "$result"
    else
        err "$response"
    fi

}

format_api_json() {

    if ((veryverbose)); then
        echo "$1"
    elif [[ $verbose -eq 1 ]]; then
        result=$(jsonquery "$1" "headers" 1)
        json_prettyify "${result}"
    else
        # decode the jwt from the response header
        jwt=$(echo "$1" | grep "X-Jwt-Assertion-" | sed 's/"//g' | sed 's/^.*\://g' | sed 's/ //g' | sed -E 's#^.+\.(.+)\..+#\1#' | base64 -D -i - -o - )

        json_prettyify "${jwt}"

    fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
    case $1 in
        -h|--help) usage >&2; safe_exit ;;
        --version) version; copyright; disclaimer; safe_exit ;;
        -z|--access_token) shift; access_token=$1 ;;
        --filter) shift; responsefilter=$1;;
        -H|--hosturl) shift; hosturl=$1 ;;
        -d|--development) development=1 ;;
        -v|--verbose) verbose=1 ;;
        -V|--veryverbose) veryverbose=1; verbose=1 ;;
        -q|--quiet) quiet=1 ;;
        -i|--interactive) interactive=1 ;;
        -f|--force) force=1 ;;
        --endopts) shift; break ;;
        *) die "invalid option: $1" ;;
    esac
    shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
