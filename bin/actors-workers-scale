#!/bin/bash
#
# actors-scale
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It scales the number of workers availabe for an agent to carry out its work.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(access_token filetoupload)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [APP_ID]

Scale the number of workers supporting a given actor.

 Options:
  -z, --access_token    Access token
  -F, --filetoupload    The file containing the message to send to the agent.
                        Use - to read from STDIN and when piping
      --filter          Comma separated list of fields to return in the response
  -n, --num             The number of workers this agent should have. The service
                        will scale to this number automatically
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/actors-common.sh"

main() {
	#echo -n
	#set -x
  if [[ -z "$args" ]]; then

    response="Please provide a valid actor id to scale."
    err "$response"

  else

    re='^[0-9]+$'

    formBody=--data "num=1"

    if [[ -n "$num" ]]; then
        if ! [[ $num =~ $re ]] ; then
            err "Please specify a positive integer value for the number of works to scale for this agent"
        fi
    else
        num=1
    fi

    cmd="curl -sk -H \"${authheader}\" -X POST -d \"num=$num\" '${hosturl}${args}/workers?pretty=true'"

    if ((veryverbose)); then
        [ "$piped" -eq 0 ] && log "Calling $cmd"
    fi

    set -x

    # make sure we specify content type as application/json
    response=`curl -sk -H "${authheader}" -X POST -d "num=$num" "${hosturl}${args}/workers?pretty=true"`

    if [[ $(jsonquery "$response" "status") = 'success' ]]; then
      result=$(format_api_json "$response")
      success "$result"
    else
      jsonval response_message "$response" "message"
      errorresponse=$(jsonquery "$response" "message")
      err "$errorresponse"
    fi

  fi
}

format_api_json() {

	if ((veryverbose)); then
        json_prettyify "$1"
	elif [[ $verbose -eq 1 ]]; then
		#result=$(jsonquery "$1" "result" 1)
        json_prettyify "${1}"
	else
        #msg=$(jsonquery "$1" "message")
        msg=$(jsonquery "$1" "msg")
        success $msg

	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -F|--filetoupload) shift; filetoupload=$1 ;;
    -n|--num) shift; num=$1;;
       --filter) shift; responsefilter=$1;;
    -H|--hosturl) shift; hosturl=$1 ;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
