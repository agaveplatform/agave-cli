#!/bin/bash
#
# notifications-list-failures
#
# author: deardooley@gmail.com
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a list of failed delivery attempts for a given notification.
# Optionally, one can search by a any notification attempt field to filter
# results.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [NOTIFICATION_ID]

List failed delivery attempts for a given notification.

 Options:
  -z, --access_token    Access token
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/notifications-common.sh"

main() {
	#echo -n
	#set -x

  if [ -z "$args" ]; then
		err "Please specify a valid notification object id to query for failures"
	else

    cmd="curl -sk -H \"${authheader}\" '${hosturl}${args}/attempts?pretty=true$(pagination)'"

  	if ((veryverbose)); then
          [ "$piped" -eq 0 ] && log "Calling $cmd"
      fi

      response=`curl -sk -H "${authheader}" "${hosturl}${args}/attempts?pretty=true$(pagination)"`

  	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
  		result=$(format_api_json "$response")
  		success "$result"
  	else
  		errorresponse=$(jsonquery "$response" "message")
  		err "$errorresponse"
  	fi
  fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
        if [[ -z "$args" ]]; then
          enddates=$(jsonquery "$1" "result.[].endTime")
          events=$(jsonquery "$1" "result.[].event")
          callbacks=$(jsonquery "$1" "result.[].url")

          n=0
          for i in "${events[@]}"; do
              local _enddate=$(echo "${enddates[$n]}" | sed 's/null//')
              local _callback=$(echo "${callbacks[$n]}" | sed 's/null//')
              failures[$n]="$i ${_enddate} ${_callback}"
              n=$[n+1]
          done

          for i in "${failures[@]}"; do
            echo "$i"
          done

        else
            id=$(jsonquery "$1" "result.id")
    #            assoc=$(jsonquery "$1" "result.associatedUuid")
    #            event=$(jsonquery "$1" "result.event")
    #            code=$(jsonquery "$1" "result.responseCode")
    #            echo "$assoc $event $code"
            echo "$id"
        fi
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -U|--uuid) shift; uuid=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
