#!/bin/bash
#
# metadata-list
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a list of metadata. Optionally, one can search by
# a custom search term using json dot notation
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [METADATA_ID]

List metadata objects. Results may be filtered by object id, parent id, or
a custom query string following MongoDB conventions.

 Options:
  -z, --access_token    Access token
  -Q, --query           Search for metadata by custom query
  -P, --parentid        Search for metadata associated with the given parent
                        object id
  -u, --unprivileged    Maximum number of results to return
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/metadata-common.sh"

main() {
	#echo -n
	#set -x

	hosturl=${hosturl%/}
	if [ -n "$args" ]; then
		metaurl="$hosturl/data/${args}?pretty=true"
	elif [ -n "$query" ]; then
    	qry=`echo -ne "${query}" | hexdump -v -e '/1 "%02x"' | sed 's/\(..\)/%\1/g'`
		metaurl="$hosturl/data?q=${qry}&pretty=true"
	elif [ -n "$parentid" ]; then
		metaurl="$hosturl/data?q=\{\"associationIds\":\"${parentid}\"\}&pretty=true"
	else
		metaurl="$hosturl/data/?pretty=true"
	fi

  if ((unprivileged)); then
    metaurl="$metaurl&privileged=false"
  fi

	cmd="curl -sk -H \"${authheader}\" '$metaurl$(pagination)'"

	if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

	response=`curl -sk -H "${authheader}" "$metaurl$(pagination)"`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	elif [ -n "$args" ]; then
		result=$(jsonquery "$1" "result._links.self.href")
		echo "${result}"
	else
		result=$(jsonquery "$1" "result.[].uuid")
		echo "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -Q|--query) shift; query=$1 ;;
    -P|--parentid) shift; parentid=$1 ;;
    -u|--unprivileged) unprivileged=1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
