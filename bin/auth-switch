#!/bin/bash
#
# auth-switch
#
# author: deardooley@gmail.com
#
# This script is part of the Agave API command line interface (CLI).
# It changes the current auth parameters cached to disk. Saves time
# between manually updating the dev url and username
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# set to 1 to prevent using cache. token creation requires a valid key
savechanges=0
disable_cache=1

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=()

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...

Updated the cached auth credentials with the given values. For ease of use,
the -S option can be specified to store the updated cache object for reuse
in subsequent calls to the API.

 Options:
  -u, --username        Agave tenant username
  -d, --devurl          URL to the development server
  -b, --baseurl         URL to the production API server
  -t, --tenantid        Current tenant id. ex. agave.prod
  -s, --apisecret       Client application api secret
  -k, --apikey          Client application api key
  -n, --client_name     Client application name
  -z, --accesstoken     Current auth token
  -r, --refreshtoken    Current refresh token
  -l, --expires_in      Token lifetime from last auth request
  -e, --expires_at      Timestamp when the token expires
  -c, --created_at      Timestamp when the token was created
  -S, --savechanges     Save the updated value
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/auth-common.sh"

main() {
	#echo -n
	#set -x
	
	current_cache=$(kvget current)

    if [ -e "$DIR/auth-switch-filter.sh" ]; then
        source $DIR/auth-switch-filter.sh
    elif [ "$dev" = "local" ]; then
        dev="http://localhost:8080"
    elif [ "$dev" = "docker" ]; then
        dev="https://docker.example.com"
    else
        dev=$(jsonquery "$current_cache" "devurl")
    fi
    dev=$(trim "$dev")
    
    
    if [[ ! "${user+1}" && -z "$user" ]]; then
        user=$(jsonquery "$current_cache" "username")
    fi
    user=$(trim "$user")
    
    
    if [[ ! "${tenant+z}" && -z "$tenant" ]]; then
        tenant=$(jsonquery "$current_cache" "tenantid")
    fi
    tenant=$(trim "$tenant")
    
    
    if [[ ! "${baseurl+1}" && -z "$baseurl" ]]; then
        baseurl=$(jsonquery "$current_cache" "baseurl")
    fi
    baseurl=$(trim "$baseurl")
    
    
    if [[ ! "${apisecret+1}" && -z "$apisecret" ]]; then
        apisecret=$(jsonquery "$current_cache" "apisecret")
    fi
    apisecret=$(trim "$apisecret")
    
    
    if [[ ! "${apikey+z}" && -z "$apikey" ]]; then 
        apikey=$(jsonquery "$current_cache" "apikey")
    fi
    apikey=$(trim "$apikey")
    
    
    if [[ ! "${accesstoken+access_1}" && -z "$accesstoken" ]]; then
        accesstoken=$(jsonquery "$current_cache" "access_token")
    fi
    accesstoken=$(trim "$accesstoken")
    
    
    if [[ ! "${refreshtoken+1}" && -z "$refreshtoken" ]]; then
        refreshtoken=$(jsonquery "$current_cache" "refresh_token")
    fi
    refreshtoken=$(trim "$refreshtoken")
    
    
    if [[ ! "${client_name+1}" && -z "$client_name" ]]; then
        client_name=$(jsonquery "$current_cache" "client_name")
    fi
    client_name=$(trim "$client_name")
    
    
    if [[ ! "${expires_in+1}" && -z "$expires_in" ]]; then
        expires_in=$(jsonquery "$current_cache" "expires_in")
    fi
    expires_in=$(trim "$expires_in")
    
    
    if [[ ! "${expires_at+1}" && -z "$expires_at" ]]; then
        expires_at=$(jsonquery "$current_cache" "expires_at")
    fi
    expires_at=$(trim "$expires_at")
    
    
    if [[ ! "${created_at+1}" && -z "$created_at" ]]; then
        created_at=$(jsonquery "$current_cache" "created_at")  
    fi
    created_at=$(trim "$created_at")
    
    
    response="{\"tenantid\":\"$tenant\",\"baseurl\":\"${baseurl}\",\"devurl\":\"${dev}\",\"apisecret\":\"$apisecret\",\"apikey\":\"$apikey\",\"username\":\"$user\",\"access_token\":\"$accesstoken\",\"refresh_token\":\"$refreshtoken\",\"created_at\":\"$created_at\",\"expires_in\":\"$expires_in\",\"expires_at\":\"$expires_at\",\"client_name\":\"$client_name\"}"

    format_api_json "$response"
}

format_api_json() {

	if ((savechanges)); then
		kvset current "$1"
	fi
	
	if ((veryverbose)); then
	    echo "Cache successfully updated and saved to $AGAVE_CACHE_DIR/current";
        json_prettyify "${1}"
    elif ((verbose)); then
        json_prettyify "${1}"
    else
        echo "Cache successfully updated and saved to $AGAVE_CACHE_DIR/current";
    fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -u|--user) shift; user=$1 ;;
  	-d|--dev) shift; dev=$1 ;;
    -b|--baseurl) shift; baseurl=$1 ;;
    -t|--tenant) shift; tenant=$1 ;;
    -s|--apisecret) shift; apisecret=$1 ;;
    -k|--apikey) shift; apikey=$1 ;;
    -n|--client_name) shift; client_name=$1 ;;
    -z|--accesstoken) shift; accesstoken=$1 ;;
    -r|--refreshtoken) shift; refreshtoken=$1 ;;
    -l|--expires_in) shift; expires_in=$1 ;;
    -e|--expires_at) shift; expires_at=$1 ;;
    -c|--created_at) shift; created_at=$1 ;;
    -S|--savechanges) savechanges=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
