#!/bin/bash
#
# profiles-list
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a list of one or more registered user profiles from the api
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(access_token)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... USERNAME

List one or more API users. Results can be filtered by partial name,
email, or username using the appropriate options.

 Options:
  -z, --access_token    Access token
  -N, --name            Search for user profiles by first and/or last name
  -F, --firstName       Search for user profiles by first name
  -L, --lastName        Search for user profiles by last name
  -E, --email           Search for user profiles by email address
  -U, --user            Search for user profiles by username
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
      --rich            Provide rich response
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/profiles-common.sh"

main() {
	#echo -n
	#set -x

	#hosturl=${hosturl%/}

  if [ -n "$args" ]; then
    hosturl="$hosturl$args?pretty=true"
	elif [ -n "$user" ]; then
		hosturl="${hosturl}?username=${user}&pretty=true"
	elif [ -n "$email" ]; then
		hosturl="${hosturl}?email=${email}&pretty=true"
	elif [ -n "$name" ]; then
		hosturl="${hosturl}?full_name=${name}&name=${name}&pretty=true"
  	elif [ -n "$firstName" ]; then
	  	hosturl="${hosturl}?first_name=${firstName}&firstName=${firstName}&pretty=true"
  	elif [ -n "$lastName" ]; then
	  	hosturl="${hosturl}?last_name=${lastName}&lastName=${lastName}&pretty=true"
	else
		hosturl="$hosturl?pretty=true"
	fi

	cmd="curl -sk -H \"${authheader}\" '$hosturl$(pagination)'"

	if ((veryverbose)); then
		[ "$piped" -eq 0 ] && log "Calling $cmd"
	fi

	response=`curl -sk -H "${authheader}" "${hosturl}$(pagination)"`

	if [[ "$(jsonquery "$response" "status")" = 'success' ]]; then
		if ((veryverbose)) && [ "$piped" -eq 1 ]; then
			echo $response
		else
			result=$(format_api_json "$response")
			success "$result"
		fi
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		json_prettyify "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	elif [[ $rich -eq 1 ]]; then
		result=$(richify "$1")
		columnize "${result}"
	else
		if [ -n "$args" ]; then
				result=$(jsonquery "$1" "result.email")
		else
		  result=$(jsonquery "$1" "result.[].email")
		fi
		success "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -N|--name) shift; name=$1 ;;
  	-F|--firstName) shift; firstName=$1 ;;
  	-L|--lastName) shift; lastName=$1 ;;
    -E|--email) shift; email=$1 ;;
    -U|--user) shift; user=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --rich) rich=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
