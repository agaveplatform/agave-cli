#!/bin/bash
#
# systems-list
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a list of one or more registered systems from the api.
# URL querying by type, default, and scope is supported.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(access_token)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [SYSTEM_ID]

List all systems available to the authenticated user. URL querying by type,
default designation, and scope is supported.

 Options:
  -z, --access_token     Access token
  -S, --storageonly      Only return storage systems. Ignored if system id is given
  -E, --executiononly    Only return execution systems. Ignored if system id is given
  -D, --defaultonly      Only return default systems. Ignored if system id is given
  -P, --publiconly       Only return public systems. Ignored if system id is given
  -Q, --privateonly      Only return private systems. Ignored if system id is given
  -l, --limit            Maximum number of results to return
  -o, --offset           Number of results to skip from the start
      --filter           Comma separated list of fields to return in the response
  -H, --hosturl          URL of the service
  -d, --development      Run in dev mode using default dev server
  -f, --force            Skip all user interaction
  -i, --interactive      Prompt for values
  -q, --quiet            Quiet (no output)
  -v, --verbose          Verbose output
  -V, --veryverbose      Very verbose output
  -h, --help             Display this help and exit
      --version          Output version information and exit
      --rich             Provide rich response
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/systems-common.sh"

main() {
	#echo -n
	#set -x

	if [ -n "$args" ]; then
		systemsurl="${hosturl}${args}?pretty=true$(pagination)"
	else
		querystring="pretty=true$(pagination)"
		if [ -n "$storageonly" ]; then
			querystring="type=storage&${querystring}"
		elif [ -n "$executiononly" ]; then
			querystring="type=execution&${querystring}"
		fi

		if [ -n "$publiconly" ]; then
			querystring="public=true&${querystring}"
		fi

		if [ -n "$privateonly" ]; then
			querystring="public=false&${querystring}"
		fi

		if [ -n "$defaultonly" ]; then
			querystring="default=true&${querystring}"
		fi

		systemsurl="${hosturl}?${querystring}"
	fi

	cmd="$(do_curl) -sk -H \"${authheader}\" '${systemsurl}'"

	if ((veryverbose)); then
		[ "$piped" -eq 0 ] && log "Calling $cmd"
	fi

	response=`curl -sk -H "${authheader}" "${systemsurl}"`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	elif [[ $rich -eq 1 ]]; then
		result=$(richify "$1")
		columnize "${result}"
	elif [ -n "$args" ]; then
		result=$(jsonquery "$1" "result.id")
		echo "${result}"
	else
		result=$(jsonquery "$1" "result.[].id")
		echo "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-S|--storageonly) storageonly=1;;
    -E|--executiononly) executiononly=1;;
    -D|--defaultonly) defaultonly=1;;
    -P|--publiconly) publiconly=1;;
    -Q|--privateonly) privateonly=1;;
    -d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --rich) rich=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
