#!/bin/bash
#
# profiles-addupdate
#
# author: deardooley@gmail.com
#
# This script is part of the Agave API command line interface (CLI).
# It creates or updates users accounts in a given tenant.
# Note: new user registering requires email verification before the account goes live.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey filetoupload)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [USERNAME]

Create or update a user account. Use of this service requires the
user-account-manager role.

Note: new user registering requires email verification before the account goes live.

 Options:
  -z, --access_token    Access token
  -F, --filetoupload      The file containing the JSON notification description to submit
      --filter          Comma separated list of fields to return in the response
      --username        The user's username. (Only requried as an option on account creation.)
      --password        The user's password. (Only required upon account creation and password reset.)
      --phone           The user's preferred contact number
      --mobile_phone    The user's mobile phone number
      --full_name       The user's full or display name
      --first_name      The user's first name
      --last_name       The user's last name
      --email           The user's email address
      --status          The account status: active/inactive
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/profiles-common.sh"

main()

{

#echo -n
	#set -x

	if [[ -z "${args}" ]]; then
		http_method=POST
	else
		http_method=PUT
	fi

	if [[ -d "$filetoupload" ]]; then

		response="Directory input is not supported"
		err "$response"

	elif [[ -z "$filetoupload" ]]; then

		if [[ -z "$account_email" ]]; then
			# email only required on profile creation
			if [[ -z "${args}" ]]; then
				err "Please specify an email address for the account"
			fi
		else
			query="email=$account_email"
		fi

		if [[ -z "$account_username" ]]; then
			# username only required on profile creation.
			# otherwise pull it from the username provided as
			# the command argument.
			if [[ -z "${args}" ]]; then
				err "Please specify a username for the account"
			else
				account_username="${args}"
			fi
		else
			query="username=$account_username&${query}"
		fi

		if [[ -z "$account_password" ]]; then
			# password only required on profile creation
			if [[ -z "${args}" ]]; then
				err "Please specify a password for the user"
			fi
		else
			query="password=$account_password&${query}"
		fi

		if [[ -n "$account_first_name" ]]; then
			query="first_name=$account_first_name&${query}"
		fi

		if [[ -n "$account_last_name" ]]; then
			query="last_name=$account_last_name&${query}"
		fi

		if [[ -n "$account_phone" ]]; then
			query="phone=$account_phone&${query}"
		fi

		if [[ -n "$account_mobile_phone" ]]; then
			query="mobile_phone=$account_mobile_phone&${query}"
		fi

		if [[ -n "$account_full_name" ]]; then
			query="full_name=$account_full_name&${query}"
		fi

		if [[ -n "$account_status" ]]; then
			query="status=$account_status&${query}"
		fi

		query=${query%&}

		cmd="curl -sk -H \"${authheader}\" -X ${http_method} -d \"${query}\" '${hosturl}$args?pretty=true'"

		if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

		response=`curl -sk -H "${authheader}" -X ${http_method} -d "${query}" "${hosturl}$args?pretty=true"`

	# reading from stdin
	elif [[ "$filetoupload" == "-"  ]]; then

		cmd="curl -sk -H \"${authheader}\" -H \"Content-Type: application/json\" -X ${http_method} --data-binary @- '${hosturl}${args}?pretty=true'"

		if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

		# make sure we specify content type as application/json
		response=`curl -sk -H "${authheader}" -H "Content-Type: application/json" -X ${http_method} --data-binary @- "${hosturl}${args}?pretty=true"`

	# standard file upload
	elif [[ -f "$filetoupload" ]]; then

		cmd="curl -sk -H \"${authheader}\" -X ${http_method} -F \"fileToUpload=@$filetoupload\" '${hosturl}$args?pretty=true'"

		if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

		response=`curl -sk -H "${authheader}" -X ${http_method} -F "fileToUpload=@$filetoupload" "${hosturl}$args?pretty=true"`

	fi

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "${result}"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		if [ -z "$args" ]; then
			internal_username=$(jsonquery "$1" "result.username")
			echo "Successfully added user $internal_username."
		else
			echo "Successfully updated user $account_username"
		fi
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
	-F|--filetoupload) shift; filetoupload=$1 ;;
	--password) shift; account_password=$1;;
    --username) shift; account_username=$1;;
	--phone) shift; account_phone=$1;;
  	--mobile_phone) shift; account_mobile_phone=$1;;
	--full_name) shift; account_full_name=$1;;
  	--first_name) shift; account_first_name=$1;;
	--last_name) shift; account_last_name=$1;;
  	--email) shift; account_email=$1;;
	--status) shift; account_status=$1;;
    --filter) shift; responsefilter=$1;;
    -H|--hosturl) shift; hosturl=$1 ;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
