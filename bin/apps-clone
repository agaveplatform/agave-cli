#!/bin/bash
#
# apps-clone
#
# author: deardooley@gmail.com
#
# This script is part of the Agave API command line interface (CLI).
# It creates a private copy of a publicly published app. Only public
# apps may be cloned. The cloning process will create a copy of the
# application assets in the cloning user's default storage system.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(access_token apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [APP_ID]

Creates a private copy of a published app. Only public
apps may be cloned. The cloning process will create a copy of the
application assets in the cloning user's default storage system.

 Options:
  -z, --access_token        Access token
  -n, --appname             Name given to the clone of the existing app. Defaults
                            to the current app name and the authenticated user's
                            username appended with a dash
  -x, --appVersion          Version given to the clone of the existing app. Defaults
                            to the current app's version number
  -e, --executionSystem     Execution system for the new app. Defaults to the current
                            app's execution system
  -p, --deploymentPath      Deployment path for the application assets on the cloned app's
                            storage system. This only applies to clone public apps.
  -s, --deploymentSystem    Deployment system for the new app. Defaults to the current
                            user's default storage system. This only applies to clone public apps.
      --filter              Comma separated list of fields to return in the response
  -H, --hosturl             URL of the service
  -d, --development         Run in dev mode using default dev server
  -f, --force               Skip all user interaction
  -i, --interactive         Prompt for values
  -q, --quiet               Quiet (no output)
  -v, --verbose             Verbose output
  -V, --veryverbose         Very verbose output
  -h, --help                Display this help and exit
      --version             Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/apps-common.sh"

main() {
	#echo -n
	#set -x

	if [ -z "$args" ]; then
		err "Please specify a valid app id to clone"
	else

		form_params=""
		if [ -n "$appname" ]; then
			dat="name=${appname}"
			form_params="${form_params} --data-urlencode "${dat}
		fi

		if [ -n "$appversion" ]; then
			dat="version=${appversion}"
			form_params="${form_params} --data-urlencode "${dat}
		fi

		if [ -n "$deploymentSystem" ]; then
			dat="deploymentSystem=${deploymentSystem}"
			form_params="${form_params} --data-urlencode "${dat}
		fi

		if [ -n "$executionSystem" ]; then
			dat="executionSystem=${executionSystem}"
			form_params="${form_params} --data-urlencode "${dat}
		fi

		if [ -n "$deploymentPath" ]; then
			dat="deploymentPath=${deploymentPath}"
			form_params="${form_params} --data-urlencode "${dat}
		fi

		cmd="curl -sk  -H \"${authheader}\" -X PUT '$hosturl$args?pretty=true' --data-urlencode "action=clone" '${form_params}'"

		if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

		response=`curl -sk  -H "${authheader}" -X PUT -d "$form_params" "$hosturl$args?pretty=true" --data-urlencode "action=clone" ${form_params}`

		if [[ $(jsonquery "$response" "status") = 'success' ]]; then
			result=$(format_api_json "$response")
			success "$result"
		else
			errorresponse=$(jsonquery "$response" "message")
			err "$errorresponse"
		fi
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		result=$(jsonquery "$1" "result.id")
		echo "Successfully cloned app $args to $result"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -n|--appname) shift; appname=$1 ;;
    -x|--appversion) shift; appversion=$1 ;;
    -s|--deploymentSystem) shift; deploymentSystem=$1 ;;
    -e|--executionSystem) shift; executionSystem=$1 ;;
    -p|--deploymentPath) shift; deploymentPath=$1 ;;
    --filter) shift; responsefilter=$1;;
    -H|--hosturl) shift; hosturl=$1 ;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
