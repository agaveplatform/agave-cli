#!/bin/bash
#
# uuid-lookup
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It resolves a uuid to a resource in the agave platform
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=()

expand=false

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... UUID [UUID]

Lookup the resource for a given UUID when the resource type is not known.

 Options:
  -H, --hosturl        URL of the service
  -d, --development    Run in dev mode using default dev server
  -e, --expand  	   Expand the response with the full resource representation
      --filter         Comma separated list of fields to return in the response
  -f, --force          Skip all user interaction
  -i, --interactive    Prompt for values
  -q, --quiet          Quiet (no output)
  -v, --verbose        Verbose output
  -V, --veryverbose    Very verbose output
  -h, --help           Display this help and exit
      --version        Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/uuid-common.sh"

main() {
	#echo -n
	#set -x

	baseuuidurl=${hosturl%/}

	if [ -z "$args" ]; then
		err "Please specify one or more valid uuid to resolve"

	# only one uuid was provided. return an object
	elif [[ ${#args[@]} -eq 1 ]]; then

		hosturl="$baseuuidurl/$args"

		cmd="curl -sk -H \"${authheader}\" '${hosturl}?expand=$expand&pretty=true$(pagination)'"

		if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

		response=`curl -sk -H "${authheader}" "${hosturl}?expand=$expand&pretty=true$(pagination)"`

		# resolve the uuid. if successful, parse it
		if [[ $(jsonquery "$response" "status") = 'success' ]]; then
			result=$(format_api_json "$response")
			success "$result"
		else
			errorresponse=$(jsonquery "$response" "message")
			err "$errorresponse"
		fi

	# multiple uuid were provided. return an array
	else
		# convert them to a comma separated list
		uuids=$(echo "${args[@]}" | sed 's/ /,/g')

		cmd="curl -sk -H \"${authheader}\" '${hosturl}?uuids=$uuids&expand=$expand&pretty=true$(pagination)'"

		if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

		response=`curl -sk -H "${authheader}" "${hosturl}?uuids=$uuids&expand=$expand&pretty=true$(pagination)"`

		# resolve the uuid. if successful, parse it
		if [[ $(jsonquery "$response" "status") = 'success' ]]; then
			result=$(format_api_json "$response")
			success "$result"
		else
			errorresponse=$(jsonquery "$response" "message")
			err "$errorresponse"
		fi
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif (( $verbose )) || ((expand)); then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		if [[ ${#args[@]} -eq 1 ]]; then
			resource_type=$(jsonquery "$1" "result.type")
			resource_url=$(jsonquery "$1" "result._links.self.href")
			echo "$resource_type $resource_url"
		else
			resource_types=( $(jsonquery "$1" "result.[].id") )
			resource_urls=( $(jsonquery "$1" "result.[]._links.self.href") )

			n=0
			for i in "${args[@]}"
			do
				resources[$n]="$i ${resource_types[$n]} ${resource_urls[$n]}"
				n=$[n+1]
			done

			for i in "${resources[@]}"; do
				echo "$i"
			done
		fi
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -e|--expand) expand=true ;;
    --filter) shift; responsefilter=$1 ;;
	-H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
