#!/bin/bash
#
# uuid-lookup
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It resolves a uuid to a resource in the agave platform
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=()

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...

Lookup the resource for a given UUID when the resource type is not known.

 Options:
  -H, --hosturl        URL of the service
  -d, --development    Run in dev mode using default dev server
  -e, --expand  	   Expand the response with the full resource representation
  -f, --force          Skip all user interaction
  -i, --interactive    Prompt for values
  -q, --quiet          Quiet (no output)
  -v, --verbose        Verbose output
  -V, --veryverbose    Very verbose output
  -h, --help           Display this help and exit
      --version        Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/uuid-common.sh"

main() {
	#echo -n
	#set -x

	baseuuidurl=${hosturl%/}
	if [ -z "$args" ]; then
		err "Please specify one or more valid uuid to resolve"
	else

		for uuid in "${args[@]}"
		do
			hosturl="$baseuuidurl/$uuid"

			cmd="curl -sk -H \"${authheader}\" '${hosturl}?pretty=true$(pagination)'"

			if ((veryverbose)); then
				[ "$piped" -eq 0 ] && log "Calling $cmd"
			fi

			response=`curl -sk -H "${authheader}" "${hosturl}?pretty=true$(pagination)"`

			# resolve the uuid. if successful, parse it
			if [[ $(jsonquery "$response" "status") = 'success' ]]; then

				if ((veryverbose)); then
					echo "$response"
				fi

				# if the user wants the uuid expanded into a resource representation,
				# we'll use the returned URL and fetch the resource.
				if ((expand)); then

					resourceurl=$(jsonquery "$response" "result._links.self.href")

					if [[ -n "$resourceurl" ]]; then

						hosturl="$resourceurl"

						subcmd="curl -sk -H \"${authheader}\" '${hosturl}?pretty=true$(pagination)'"

						if ((veryverbose)); then
							[ "$piped" -eq 0 ] && log "Expanding resource at $hosturl.\nCalling $subcmd"
						fi

						# The expanded resource becomes the response to this command
						response=`curl -sk -H "${authheader}" "${hosturl}?pretty=true$(pagination)"`
					fi
				fi

				# standard success handling if successful.
				if [[ $(jsonquery "$response" "status") = 'success' ]]; then
					result=$(format_api_json "$response")
					success "$result"
				# in the event expansion was requested and it failed,
				else
					errorresponse=$(jsonquery "$response" "message")
					err "$errorresponse"
				fi

			else
				errorresponse=$(jsonquery "$response" "message")
				err "$errorresponse"
			fi
		done
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]] || ((expand)); then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		resource_type=$(jsonquery "$1" "result.type")
		resource_url=$(jsonquery "$1" "result._links.self.href")
		echo "$resource_type $resource_url"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -e|--expand) expand=1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
