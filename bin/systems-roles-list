#!/bin/bash
#
# systems-roles-list
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It provides a mechanism for discovering user roles on a system.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [SYSTEM_ID]

Lists user roles on a system.

 Options:
  -z, --access_token    Access token
  -u, --username        The user whose permissions should be listed
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
      --rich            Provide rich response
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/systems-common.sh"

main() {
	#echo -n
	#set -x

	if [ -z "$args" ]; then
		err "Please specify a valid system id for which to retrieve permissions"
	else

		cmd="$(do_curl) -sk -H \"${authheader}\" '$hosturl$args/roles/$roleusername?pretty=true$(pagination)'"

		if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

		response=`curl -sk -H "${authheader}" "$hosturl$args/roles/$roleusername?pretty=true$(pagination)"`

		if [[ $(jsonquery "$response" "status") = 'success' ]]; then
			result=$(format_api_json "$response")
			success "$result"
		else
			errorresponse=$(jsonquery "$response" "message")
			err "$errorresponse"
		fi
	fi

}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif ((verbose)); then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	elif [[ $rich -eq 1 ]]; then
		result=$(richify "$1")
		columnize "${result}"
	else
		if [[ -z "$roleusername" ]]; then
			roleusers=( $(jsonquery "$1" "result.[].username") )

			n=0
			for i in $(jsonquery "$1" "result.[].role")
			do
				roleusers[$n]="${roleusers[$n]} $i"
				n=$[n+1]
			done

			for i in "${roleusers[@]}"; do
				echo "$i"
			done

		else
			systemrole=$(jsonquery "$1" "result.role")
			 echo "$roleusername $systemrole"
		fi
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -u|--roleusername) shift; roleusername=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --rich) rich=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
