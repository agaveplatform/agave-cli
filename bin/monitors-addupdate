#!/bin/bash
#
# monitors-addupdate
#
# author: deardooley@gmail.com
#
# This script is part of the Agave API command line interface (CLI).
# It adds a notification.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [MONITOR_ID]

Subscribe for a monitor about a system. A monitor must be associated with a
valid system to which you have at least USER role. You may include a
notifications attribute containing an array of notification objects to subscribe
for updates about changes in check results. You may also tell the monitor to
update the system status accordingly if you have at least ADMIN role by
setting the updateSystemStatus attribute to true. Monitor descriptions can be
passed in as a file containing a JSON object or via command line arguments.

 Options:
  -z, --access_token          Access token
  -F, --filetoupload          The file containing the JSON monitor description to submit
                              Use - to read from STDIN and when piping
  -S, --systemId              The system to monitor
  -A, --active                Whether the monitor should be active. true or false.
                              Default true
  -I, --interval              How often the monitor should run in minutes.
                              Minimum 5, default 720 (12 hours)
  -U, --updateSystemStatus    Whether the test should update the system status.
                              You must have an ADMIN role on the system to set this.
                              Default = false
  -H, --hosturl               URL of the service
  -d, --development           Run in dev mode using default dev server
  -f, --force                 Skip all user interaction
  -i, --interactive           Prompt for values
  -q, --quiet                 Quiet (no output)
  -v, --verbose               Verbose output
  -V, --veryverbose           Very verbose output
  -h, --help                  Display this help and exit
      --version               Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/monitors-common.sh"

main() {
	#echo -n
	#set -x

  if [[ -d "$filetoupload" ]]; then

    response="Directory input is not supported"
    err "$response"

  else

    # no file input, using builder arguments instead
    if [[ -z "$filetoupload" ]]; then

      if [[ -z "$systemId" ]]; then
        err "Please specify the id of a system to monitor"
      fi

      if [[ -z "$interval" ]]; then
        frequency=720
      else
        frequency="$interval"
      fi

      if [[ -z "$updateSystemStatus" ]]; then
        updateSystemStatus=0
      fi

      if [[ -z "$active" ]]; then
        active="true"
      fi

      cmd="curl -sk -H \"${authheader}\" -X POST -d \"frequency=${frequency}&active=${active}&updateSystemStatus=${updateSystemStatus}&target=${systemId}\" '${hosturl}$args?pretty=true'"

      if ((veryverbose)); then
        [ "$piped" -eq 0 ] && log "Calling $cmd"
      fi

      response=`curl -sk -H "${authheader}" -X POST -d "frequency=${frequency}&active=${active}&updateSystemStatus=${updateSystemStatus}&target=${systemId}" "${hosturl}$args?pretty=true"`

    # reading from stdin
    elif [[ "$filetoupload" == "-"  ]]; then

      cmd="curl -sk -H \"${authheader}\" -H \"Content-Type: application/json\" -X POST --data-binary @- '${hosturl}${args}?pretty=true'"

      if ((veryverbose)); then
        [ "$piped" -eq 0 ] && log "Calling $cmd"
      fi

      # make sure we specify content type as application/json
      response=`curl -sk -H "${authheader}" -H "Content-Type: application/json" -X POST --data-binary @- "${hosturl}${args}?pretty=true"`

    # check file exists
    elif [[ ! -e "$filetoupload" ]]; then

      response="No JSON monitor object found at $filetoupload"
      err "$response"

    # standard file upload
    else

      cmd="curl -sk -H \"${authheader}\" -X POST -F \"fileToUpload=@$filetoupload\" '${hosturl}$args?pretty=true'"

      if ((veryverbose)); then
        [ "$piped" -eq 0 ] && log "Calling $cmd"
      fi

      response=`curl -sk -H "${authheader}" -X POST -F "fileToUpload=@$filetoupload" "${hosturl}$args?pretty=true"`

    fi

  	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
  		result=$(format_api_json "$response")
  		success "$result"
  	else
  		errorresponse=$(jsonquery "$response" "message")
  		err "$errorresponse"
  	fi

  fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		oid=$(jsonquery "$1" "result.id")
    target=$(jsonquery "$1" "result.target")
    if [ -n "$args" ]; then
      success "Successfully updated monitor $oid on target $target"
    else
      success "Successfully created monitor $oid on target $target"
    fi
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -F|--filetoupload) shift; filetoupload=$1 ;;
    -S|--systemId) shift; systemId=$1 ;;
    -U|--updateSystemStatus) shift; updateSystemStatus=$1 ;;
    -I|--interval) shift; interval=$1 ;;
    -A|--active) shift; active=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
