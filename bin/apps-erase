#!/bin/bash
#
# apps-erase
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It erases the app completely. This is an admin-only action and
# should not be used unless you completely understand what you are
# doing.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [APP_ID]

Erases an app completely. This is an admin-only action and should not
be used unless you completely understand what you are doing. This action
removes jobs, notifications, and metadata associated with it. Use with
caution!

 Options:
  -z, --access_token    Access token
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/apps-common.sh"

main() {
  #echo -n
  #set -x

  if [ -z "$args" ]; then
    err "Please specify a valid app id to erase"
  else

    cmd="agave-curl -sk -H \"${authheader}\" -X PUT -d \"action=erase\" '$hosturl$args?pretty=true'"

    if ((veryverbose)); then
      [ "$piped" -eq 0 ] && log "Calling $cmd"
    fi

    response=`agave-curl -sk -H "${authheader}" -X PUT -d "action=erase" "$hosturl$args?pretty=true"`

    if [[ $(jsonquery "$response" "status") = 'success' ]]; then
      result=$(format_api_json "$response")
      success "$result"
    else
      errorresponse=$(jsonquery "$response" "message")
      err "$errorresponse"
    fi
  fi
}

format_api_json() {

  if ((veryverbose)); then
    echo "$1"
  elif [[ $verbose -eq 1 ]]; then
    result=$(jsonquery "$1" "result" 1)
    json_prettyify "${result}"
  else
    echo "Successfully erased app $args"
  fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -a|--action) shift; action=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
    -d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
