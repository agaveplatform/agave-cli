#!/bin/bash
#
# jobs-output
#
# author: deardooley@gmail.com
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a listing of the job output. If the job completed
# normally and archived, the listing will be on the archive directory.
# Otherwise, it will be on the work folder if it still exists. By
# specifying the --download flag, the remote file will be downloaded
# to the specified directory
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [JOB_ID] [PATH]

**DEPRECATED**
Please use the jobs-output-get and jobs-output-list commands instead
for better download performance, recursive directory downloads, and
range support.

 Options:
  -z, --access_token    Access token
  -D, --download        Download the output file to the local folder
  -N, --filename        Name to give the downloaded file
  -P, --path            Path to desired output file relative to job output folder
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						                       #
##################################################################
##################################################################

source "$DIR/jobs-common.sh"

main() {
	#echo -n
	#set -x

	if [ -z "$args" ]; then
		err "Please specify a job id for which to view the output"
	else
		jobid=$args

    commonparams="-z $access_token "

    if ((development)); then
      commonparams="$commonparams -d "
    fi

    if ((veryverbose)); then
      commonparams="$commonparams -V "
    elif ((verbose)); then
      commonparams="$commonparams -v "
    fi

    if [ -n "$download" ]; then

      getparams=''

      if [ -n "$filename" ]; then
        getparams="$getparams -N $filename "
			fi

      jobs-output-get $commonparams $getparams $jobid $path

		else

			jobs-output-list $commonparams $listparams $jobid $path

		fi
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		result=$(jsonquery "$1" "result.[].name")
		echo "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -P|--path) shift; path=$1 ;;
    -D|--download) download=1 ;;
    -N|--filename) shift; filename=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
