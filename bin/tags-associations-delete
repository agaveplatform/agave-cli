#!/bin/bash
#
# tags-associations-delete
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# Removes a tag from an existing resource. Resource id or uuid can be
# provided.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey filetoupload)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [TAG_NAME|TAG_UUID] [UUID]...

Create or update a tag on a resource.

 Options:
  -z, --access_token      Access token
  -H, --hosturl           URL of the service
  -d, --development       Run in dev mode using default dev server
  -f, --force             Skip all user interaction
  -i, --interactive       Prompt for values
  -q, --quiet             Quiet (no output)
  -v, --verbose           Verbose output
  -V, --veryverbose       Very verbose output
  -h, --help              Display this help and exit
      --version           Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/tags-common.sh"

main() {
	#echo -n
	#set -x
    # no tag id or uuid, so exit with a message

    if [[ -z "$args" ]]; then

        err "Please provide a tag name or id to remove"

    else

        # tag id is first positional argument
        tag_id=$1

        shift

        # no tag id or uuid, so exit with a message
        if [[ -z "$1" ]]; then

            err "Please provide the uuid of a resource to untag"

        else

            uuid=$1

            cmd="$(do_curl) -sk -H \"${authheader}\" -X DELETE '${hosturl}$tag_id/associations/$uuid?pretty=true'"

            if ((veryverbose)); then
                [ "$piped" -eq 0 ] && log "Calling $cmd"
            fi

            response=`curl -sk -H "${authheader}" -X DELETE "${hosturl}$tag_id/associations/$uuid?pretty=true"`

            if [[ $(jsonquery "$response" "status") = 'success' ]]; then
                result=$(format_api_json "$response")
                success "$result"
            else
                errorresponse=$(jsonquery "$response" "message")
                err "$errorresponse"
            fi
        fi
    fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
        success "Successfully untagged $uuid"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -H|--hosturl) shift; hosturl=$1 ;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
