#!/bin/bash
#
# tags-search
#
# author: deardooley@gmail.com
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a list of tags based on search criteria.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTIONS]... [QUERY_TERM]...

Search for tags based on tag attribute values. Valid values should be
specified in key pairs such as name.like=*foo*. Multiple search terms may be provided
as consecutive arguments.

 Query parameters:
  created                       The timestamp when the tag was first created. Results are
                                rounded by day. You may specify using YYYY-MM-DD format or free
                                form timeframes such as 'yesterday' or '3 days ago'.
  id                            The unique id of this tag.
  lastupdated                   The timestamp of the last time the tag was updated. Results are
                                rounded by day. You may specify using YYYY-MM-DD format or free
                                form timeframes such as 'yesterday' or '3 days ago'.
  associationIds                The set of resources associated with this tag. Searches should only
                                use 'in' and 'nin' search operations.
  name                          The name of the tag.
  owner                         The username of the principal who originally registered the tag.

 Options:
  -z, --access_token    Access token
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/tags-common.sh"

main() {
	#echo -n
	#set -x
    tagsurl=${hosturl%/}

    querystring=""

    if [ -n "$args" ]; then
        for i in "${args[@]}"
        do
            querystring="${querystring} --data "$(urlencode "${i}" | sed 's/%3D/=/')
        done
    fi

    cmd="curl -G -sk -H \"${authheader}\" '$tagsurl?pretty=true$(pagination)' ${querystring}"

	if ((veryverbose)); then
        [ "$piped" -eq 0 ] && log "Calling $cmd"
    fi


	response=`curl -G -v -sk -H "${authheader}" $tagsurl?pretty=true$(pagination) $querystring`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
        names=$(jsonquery "$1" "result.[].name")

        n=0
        local _name _id
        for i in $(jsonquery "$1" "result.[].id")
        do
            _name=""
            if [[ -n "${names[$n]}" ]] && [[ "${names[$n]}" != "null" ]]; then
                _name="${names[$n]} "
            fi

            _id=""
            if [[ -n "${i}" ]] && [[ "${i}" != "null" ]]; then
                _id="${i} "
            fi

            tagdesc[$n]="${_name}${_id}"
            n=$[n+1]
        done

        for i in "${tagdesc[@]}"; do
            echo "$i"
        done
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
