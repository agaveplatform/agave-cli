#!/bin/bash
#
# monitors-checks-list
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a list of checks for a monitor. This is essentially the
# history record of the monitor.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey monitorId)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [MONITOR_CHECK_ID]

List checks for a given monitor. Depending on the monitor frequency, this can
get rather large. Use the start, end, status, limit, and offset arguments to
filter and paginate the results.

 Options:
  -z, --access_token    Access token
  -M, --monitorId       The monitor for whom the checks where performed
  -S, --startDate       The start date of the check in ISO 8601 format.
                        (ex. 2004-02-12T15:19:21+00:00)
  -E, --endDate         The end date of the check in ISO 8601 format
                        (ex. 2004-02-12T15:19:21+00:00)
  -R, --result          The result the returned tests should have. Valid values
                        are PASSED, FAILED, UNKNOWN
  -T, --type            The type of monitoring check run. Valid values are
                        STORAGE and LOGIN
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/monitors-common.sh"

main() {
	#echo -n
	#set -x

	hosturl=${hosturl%/}

  if [ -n "$args" ]; then

  	monitorurl="${hosturl}/${monitorId}/checks/${args}?pretty=true$(pagination)"

  else
      querystring="pretty=true"
      if [ -n "$startDate" ]; then
          querystring="startDate=${startDate}&${querystring}"
      fi

      if [ -n "$endDate" ]; then
          querystring="endDate=${endDate}&${querystring}"
      fi

      if [ -n "$result" ]; then
          querystring="result=${result}&${querystring}"
      fi

      if [ -n "$type" ]; then
          querystring="type=${type}&${querystring}"
      fi

      monitorurl="${hosturl}/${monitorId}/checks?${querystring}"
  fi

  if [ -z "$monitorId" ]; then

    response="Please provide a valid monitor id"
    err "$response"

  else

    cmd="$(do_curl) -sk -H \"${authheader}\" '${monitorurl}$(pagination)'"

  	if ((veryverbose)); then
  		[ "$piped" -eq 0 ] && log "Calling $cmd"
  	fi

  	response=`curl -sk -H "${authheader}" "${monitorurl}$(pagination)"`

  	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
  		result=$(format_api_json "$response")
  		success "$result"
  	else
  		errorresponse=$(jsonquery "$response" "message")
  		err "$errorresponse"
  	fi

  fi
}

format_api_json() {

    if ((veryverbose)); then
        echo "$1"
    elif [[ $verbose -eq 1 ]]; then
        result=$(jsonquery "$1" "result" 1)
        json_prettyify "${result}"
    else

        if [ -n "$args" ]; then
            checkresult=$(jsonquery "$1" "result.result" | sed 's/null//')
            checkdate=$(jsonquery "$1" "result.created" | sed 's/null//')
            echo "$args $checkdate $checkresult"
        else
            monitors=( $(jsonquery "$1" "result.[].id") )
            types=( $(jsonquery "$1" "result.[].type") )
            outcomes=( $(jsonquery "$1" "result.[].result") )

            n=0
            for i in $(jsonquery "$1" "result.[].created"); do

                local _created _type _outcome

                _created=""
                if [[ -n "$i" ]] && [[ "$i" != "null" ]]; then
                    _created=" $i"
                fi

                _type=""
                if [[ -n "${types[$n]}" ]] && [[ "${types[$n]}" != "null" ]]; then
                    _type=" ${types[$n]}"
                fi

                _outcome=""
                if [[ -n "${outcomes[$n]}" ]] && [[ "${outcomes[$n]}" != "null" ]]; then
                    _outcome=" ${outcomes[$n]}"
                fi

                monitors[$n]="${monitors[$n]}${_type}${_outcome}${_created}"
                n=$[ n + 1 ]
            done

            for i in "${monitors[@]}"; do
                echo "$i"
            done
        fi

    fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -M|--monitorId) shift; monitorId=$1 ;;
    -S|--startDate) shift; startDate=$1 ;;
    -E|--endDate) shift; endDate=$1 ;;
    -R|--result) shift; result=$1 ;;
    -T|--type) shift; type=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
