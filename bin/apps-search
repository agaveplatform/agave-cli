#!/bin/bash
#
# apps-search
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a list apps based on search criteria.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTIONS]... [QUERY_TERM]...

Search for apps based on app attribute values. Valid values should be
specified in key pairs such as executionSystem.like=docker* or
public=true. Multiple search terms should be provided as a URL query string. For example,
'executionType.eq=HPC' 'executionSystem.like=*stampede*' 'lastUpdated.after=last week'.

 Query parameters:
  available                   Whether the app is available. Boolean, default true
  checkpointable              Whether the app is checkpointable
  checksum                    The checksum of the public app deployment assets.
  created                     The timestamp when the app was first registered. Results are
                              rounded by day. You may specify using YYYY-MM-DD format or free
                              form timeframes such as 'yesterday' or '3 days ago'.
  defaultmaxruntime           The max run time for job requests utilizing this app.
  defaultmemorypernode        The default memory request for job requests utilizing this app.
  defaultnodes                The default number of nodes requested for job requests utilizing this app.
  defaultprocessorspernode    The default processors per node request for job requests utilizing this app.
  defaultqueue                The default executionSystem queue for job requests utilizing this app.
  deploymentpath              The deployment path on the storageSystem where the app assets reside.
  executionsystem             The id of the system where the app will run.
  executiontype               The execution type of the app. One of HPC, CLI, CONDOR.
  helpuri                     The URL to the help documentation for this app.
  icon                        The icon associated with this app.
  id                          The unique id of the app defined by <name>-<version>
  inputs.id                   The id of one or more input definitions for the app
  label                       The display label for the app.
  lastupdated                 The timestamp of the last time the app was updated. Results are
                              rounded by day. You may specify using YYYY-MM-DD format or free
                              form timeframes such as 'yesterday' or '3 days ago'.
  longdescription             The full description of the app.
  modules                     The list of modules used by this app. Do not use equality
                              operators with this search term.
  name                        The name of the app
  ontology                    The list of ontological terms used by this app. Do not use
                              equality operators with this search term.
  outputs.id                  The id of one or more output definitions for the app
  owner                       The owner of the app.
  parallelism                 The parallelism type of the app: One of PARALLEL, PTHREAD, SERIAL
  parameters.id               The id of one or more parameter definitions for the app
  parameters.type             The type of one or more parameter definitions for the app
  public                      Whether the app is publicly available for use.
  publiconly                  Restricts to only public apps. Present for legacy support. This is
                              equivalent to public=true
  privateonly                 Restricts to only private apps. Present for legacy support. This is
                              equivalent to public=false
  revision                    The revision count of the app. This is the number of times the
                              app definition has been udpated.
  shortdescription            The short description of the app.
  storagesystem               The id of the system where the app assets reside.
  tags                        The list of ontological terms used by this app. Do not use
                              equality operators with this search term.
  templatepath                The path of the wrapper template file relative to the app's
                              deploymentPath.
  testpath                    The path of the test wrapper template relative to the app's
                              deploymentPath.
  uuid                        The uuid of the app.
  version                     The version of the app

 Options:
  -z, --access_token    Access token
  -l, --limit           Maximum number of results to return
  -o, --offset          Number of results to skip from the start
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/apps-common.sh"

main() {
	#echo -n
	#set -x
    appsurl=${hosturl%/}

    querystring=" "

    if [ -n "$args" ]; then
        for i in "${args[@]}"
        do
            if [[ -n "$i" ]]; then
                querystring+=$(echo -e " --data-urlencode ${i}")
            fi
        done

    fi

    cmd="curl -G -sk -H \"${authheader}\" '$appsurl?pretty=true$(pagination)' $querystring)"

	if ((veryverbose)); then
        [ "$piped" -eq 0 ] && log "Calling $cmd"
    fi

    response=`curl -G -sk -H "${authheader}" $appsurl?pretty=true$(pagination) ${querystring}`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		appids=$(jsonquery "$1" "result.[].id")

		echo "$appids"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
