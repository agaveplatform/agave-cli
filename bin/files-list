#!/bin/bash
#
# files-list
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a file listing on a remote system. If no  jobs. Optionally, one can search by name, tag,
# ontology, or start date
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [PATH]

List files on a remote system. If no system is specified, your default storage
system will be used. By specifying a system, the path given will be resolved
on that remote system. Note that the system id, not hostname must be given.

 Options:
  -z, --access_token    Access token
  -S, --systemId        Specify the system id
  -L, --long            Print response in unix-style ls -l format
  -l, --limit           Maximum number of results to return
  -r, --recursive       Recursively list the contents of the remote path
  -o, --offset          Number of results to skip from the start
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
      --rich            Provide rich response
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/files-common.sh"

main() {
	#echo -n
	#set -x

	if [ -n "$systemId" ]; then
		hosturl="${hosturl}listings/system/${systemId}/${args}"
	else
		hosturl="${hosturl}listings/${args}"
	fi

	cmd="curl -sk -H \"${authheader}\" '${hosturl}?pretty=true$(pagination)'"

  if ((veryverbose)); then
		[ "$piped" -eq 0 ] && log "Calling $cmd"
	fi

	response=`curl -sk -H "${authheader}" "${hosturl}?pretty=true$(pagination)"`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then

    result=$(format_api_json "$response")
    echo "$result";

    # recursively list all child directories if requested
    if ((recursive)); then

      fgrparams="-r "

      if ((development)); then
        fgrparams="$fgrparams  -d "
      fi

      if ((veryverbose)); then

        fgrparams="$fgrparams -V "

      elif ((verbose)); then

        fgrparams="$fgrparams -v "
      fi

      if ((long)); then

        fgrparams="$fgrparams -L "
      fi

      if ((filter)); then

        fgrparams="$fgrparams --filter $filter "
      fi

      read -a names <<< $(jsonquery "$response" "result.[].name")
      read -a formats <<< $(jsonquery "$response" "result.[].format")

      # skip the first index in the array in this for loop
      #echo "${!names[@]}" | xargs -P 5 -n 1 -I "%%FILE%%" files-get -v $args
      for i in `echo "${!names[@]}"`; do

        if [ "${formats[i]}" == "folder" ] && [ "${names[i]}" != "." ]; then
          files-list -r ${fgrparams} -S "$systemId" $args/${names[i]}
        fi

      done

    fi

	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		json_prettyify "${1}"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	elif [[ $long -eq 1 ]]; then
        #lstng=$(lsify "$1" | awk '{ printf("%-10s %+12s %+18s %+32s %s\n", $1, $2, $3, $4, $5); }')
        lsify "$1" | column -t -s$'\t'
	elif [[ $rich -eq 1 ]]; then
        result=$(richify "$1")
        columnize "${result}"
    else
      if ((recursive)); then
        names=($(jsonquery "$1" "result.[].name"))
        paths=($(jsonquery "$1" "result.[].path"))
        types=($(jsonquery "$1" "result.[].type"))

        n=0
        for i in "${names[@]}"; do

          if [[ "${types[$n]}" == "dir" ]]; then
            # skip the named directories in the parent listing as they will be
            # printed in their own listing results
            if [[ "$i" == "." ]]; then
              echo "${paths[$n]}"
            fi
          else
            echo "${paths[$n]}"
          fi

          n=$[n+1]
        done

      else
        result=$(jsonquery "$1" "result.[].path")
        echo "${result}"
      fi
	fi
}

lsify () {
    #jq '.result[] | {type,length,name,lastModified}'
    if ((recursive)); then
      paths=($(jsonquery "$1" "result.[].path"))
    fi

    names=($(jsonquery "$1" "result.[].name"))

    #echo $names
    lengths=($(jsonquery "$1" "result.[].length"))
    #echo $lengths
    types=($(jsonquery "$1" "result.[].type"))
    #echo $types
    modifieds=($(jsonquery "$1" "result.[].lastModified"))
    #echo $modifieds
    pems=($(jsonquery "$1" "result.[].permissions"))
    thisyear=$(date +%Y)

    n=0
    for i in "${names[@]}"; do
        up=''
        if [[ "${pems[$n]}" == "ALL" ]]; then
            up='rwx------'
        elif [[ "${pems[$n]}" == "READ" ]]; then
            up='r--------'
        elif [[ "${pems[$n]}" == "WRITE" ]]; then
            up='-w-------'
        elif [[ "${pems[$n]}" == "EXECUTE" ]]; then
            up='--x------'
        elif [[ "${pems[$n]}" == "READ_WRITE" ]]; then
            up='rw-------'
        elif [[ "${pems[$n]}" == "READ_EXECUTE" ]]; then
            up='r-x------'
        elif [[ "${pems[$n]}" == "WRITE_EXECUTE" ]]; then
            up='-wx------'
        elif [[ "${pems[$n]}" == "EXECUTE" ]]; then
            up='--x------'
        fi

        if [[ "${types[$n]}" == "dir" ]]; then
            up="d${up}"
        else
            up="-${up}"
        fi

        formatteddate=$(format_iso8601_time "${modifieds[$n]}")

        if ((recursive)); then
          if [[ "${types[$n]}" == "dir" ]]; then
            # skip the named directories in the parent listing as they will be
            # printed in their own listing results
            if [[ "$i" == "." ]]; then
              echo -e "${up}\t${username}\t${lengths[$n]}\t${formatteddate}\t${paths[$n]}"
            fi
          else
            echo -e "${up}\t${username}\t${lengths[$n]}\t${formatteddate}\t${paths[$n]}"
          fi
        else
          echo -e "${up}\t${username}\t${lengths[$n]}\t${formatteddate}\t$i"
        fi
        n=$[n+1]
    done

}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -S|--systemId) shift; systemId=$1 ;;
    -L|--long) long=1;;
    -r|--recursive) recursive=1;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --rich) rich=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
