#!/bin/bash
#
# transfers-list
#
# author: ertanner@chapman.edu
#
# This script is part of the Agave API command line interface (CLI).
# It retrieves a one or more transfer object.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [JOB_ID]
List past, current, or a specific data transfer. Results may be paginated.

 Options:
  -z, --access_token	Access token
  -s, --status			  Search for transfer by status
  -l, --limit         Maximum number of results to return
  -o, --offset        Number of results to skip from the start
      --filter        Comma separated list of fields to return in the response
  -H, --hosturl       URL of the service
  -d, --development   Run in dev mode using default dev server
  -f, --force         Skip all user interaction
  -i, --interactive   Prompt for values
  -q, --quiet         Quiet (no output)
  -v, --verbose       Verbose output
  -V, --veryverbose   Very verbose output
  -h, --help          Display this help and exit
      --version       Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/transfers-common.sh"

main() {
	#echo -n
	#set -x

	hosturl=${hosturl%/}
	if [ -n "$args" ]; then
		transfersurl="$hosturl/$args"
	else
		transfersurl="$hosturl/"
	fi

  querystring="pretty=true"
  if [ -n "$status" ]; then
    querystring="${querystring}&status=$status"
  fi

  cmd="$(do_curl) -sk -H \"${authheader}\" '$transfersurl?${querystring}$(pagination)'"

	if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

	response=`curl -sk -H "${authheader}" "$transfersurl?${querystring}$(pagination)"`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		if [ -n "$args" ]; then
			jobstatus=$(jsonquery "$1" "result.status")
			echo "$args $jobstatus"
		else
			transferids=( $(jsonquery "$1" "result.[].id") )

			n=0
			for i in $(jsonquery "$1" "result.[].status")
			do
				echo "${transferids[$n]} $i"
				n=$[n+1]
			done

#			for i in "${transferids[@]}"; do
#				echo "$i"
#			done
		fi
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -s|--status) shift; status=$1 ;;
    -l|--limit) shift; limit=$1;;
    -o|--offset) shift; offset=$1;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
